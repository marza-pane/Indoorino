

/*#if defined (ARDUINO)
class packetRouter: public packetParse
{
    
protected:
    void        _sendreport (const uint8_t, const char *, const char *, va_list);
    void        _sendreport_helper (const uint8_t, const char *, const char *, va_list);

public:

    packetRouter        (bool p):packetParse(p) {};

// #if defined (INDOORINO_ESP)
//     espPacketList       packetlist;
// #endif
    
    void            loop            (void);
    void            send            (ipacket *);              
    void            send            (ipacket *, const char *);
    
    #if defined (ESP8266)
    void            sendUdp         (ipacket *);
    void            sendUdp         (ipacket *, const char*);
    #endif
    void            sendSerial      (ipacket *);
    void            sendSerial      (ipacket *, const char*);
    
    void            sendReport      (const uint8_t, const char *, const __FSH*, ...);
    void            sendReport      (const uint8_t, const __FSH*, const __FSH*, ...);
    void            sendReport      (const uint8_t, const __FSH*, ...);
    
    void            sendConfig      (void);
    void            sendStatus      (void);
    
    /* allarm types:
     * 0=flood
     * 1=smoke
     * 2=temperature
     * 3=fire
     * 4=power
     */
    
//     void            sendAllarm      (const uint8_t, const uint8_t);  

    /* warning types:
     * 0=open door
     * 1=open window
     * 2=unlocked
     * 3=power
     */

//     void            sendWarning     (const uint8_t, const uint8_t);
// };
// #endif  









void        packetTransmit::_sendreport_helper   (const uint8_t level, const char * device, 
                                                  const char * message, va_list args)
{
    char * msg = (char*)calloc(SERIAL_TX_BUFFER_SIZE, sizeof(char));
    vsnprintf_P(msg, SERIAL_TX_BUFFER_SIZE, message, args);
    
    ipacket * r = new ipacket(IBACOM_REPORT); 
    
    strcpy(r->p_message(), msg);
    strcpy(r->p_name(), device);
    *r->p_epoch() = rtc.epoch();
    *r->p_level() = level;
      
    if (level == 0) {
    #if defined (DEBUG_FLAG)
        send(r);
    #endif
    } else { send(r); }
    
    free(msg);
    delete r;
}

void        packetRouter::_sendreport            (const uint8_t level, const char * device, 
                                                  const char * message, va_list args)
{
    char * msg = (char*)calloc(SERIAL_TX_BUFFER_SIZE, sizeof(char));
    vsnprintf_P(msg, SERIAL_TX_BUFFER_SIZE, message, args);
    
    ipacket * r = new ipacket(IBACOM_REPORT); 
    
    strcpy(r->p_message(), msg);
    strcpy_P(r->p_name(), device);
    *r->p_epoch() = rtc.epoch();
    *r->p_level() = level;
      
    if (level == 0) {
    #if defined (DEBUG_FLAG)
        send(r);
    #endif
    } else { send(r); }
    
    free(msg);
    delete r;
}

void        packetRouter::sendReport             (const uint8_t level, 
                                                  const __FSH* device, const __FSH * message, ...)
{	
	va_list args;

	va_start(args, message);
	_sendreport(level, (const char *)device,(const char *)message, args);
	va_end(args);
}

void        packetRouter::sendReport             (const uint8_t level, 
                                                  const char * device, const __FSH * message, ...)
{	
	va_list args;

	va_start(args, message);
	_sendreport_helper(level, device,(const char *)message, args);
	va_end(args);
}

void        packetRouter::sendReport            (const uint8_t level, const __FSH * message, ...)
{	
	va_list args;

	va_start(args, message);
	_sendreport(level, F2C(_id),(const char *)message, args);
	va_end(args);
}

void        packetRouter::sendConfig            (void)
{
    
    ipacket * ptr = new ipacket(IBACOM_CONF_STD);    
    char buf[LEN_NAME];
    strcpy(buf,P2C(BOARD_NAME));
    strcpy(ptr->p_name(), buf);

    strcpy(buf,P2C(INDOORINO_TYPE));
    strcpy(ptr->p_type(), buf);

    strcpy(buf,P2C(BOARD_TYPE));
    strcpy(ptr->p_board(), buf);
    *ptr->p_devnum() = conf.devnum();
    
    send(ptr);
    debug("\niop:sendConfig:devnum is %u",conf.devnum());

#if defined INDOORINO_SAMPLER

    ptr = reallocPacket(ptr, IBACOM_CONF_SAMPLER);
    
    *ptr->p_stepday1()  = conf.step();
    *ptr->p_stephour1() = conf.cool();

    debug("\niop:sendConfig:devnum is %u",conf.devnum());
    for (uint8_t i=0; i<conf.devnum(); i++)
    {
        ptr=conf.device(ptr,i);
        send(ptr);
    }

#elif defined INDOORINO_ESP
    
    ptr = reallocPacket(ptr, IBACOM_CONF_ESP);
    
    uint32_t p = conf.localport();
    uint8_t  a = conf.attempts();
    uint32_t t = conf.timeout();
    
    char ip[LEN_IPADDRESS];
    WiFi.localIP().toString().toCharArray(ip,LEN_IPADDRESS);
    strcpy(ptr->p_ip(), ip);
    memcpy(ptr->p_port(), &p, sizeof(uint32_t));
    memcpy(ptr->p_timeout(), &t, sizeof(uint32_t));
    memcpy(ptr->p_level(), &a, sizeof(uint8_t));
    send(ptr);
    
    debug("\niop:sendConfig:devnum is %u",conf.devnum());
    for (uint8_t i=0; i<conf.devnum(); i++)
    {
        ptr=conf.device(ptr,i);
        send(ptr);
    }
    
#endif
    delete(ptr);
}

void        packetRouter::sendStatus            (void)
{
    ipacket * ptr=new ipacket(IBACOM_STATUS_STD);
    
    char buf[LEN_NAME];
    uint32_t val=rtc.epoch();
    strcpy(buf,P2C(BOARD_NAME));
    strcpy(ptr->p_name(), buf);
    
    memcpy(ptr->p_epoch(), &val, sizeof(uint32_t));
    val = freeRam();
    memcpy(ptr->p_freeram(), &val, sizeof(uint32_t));
    memcpy(ptr->p_looptime(), &_looptime, sizeof(uint32_t));
//     memcpy(ptr->p_errors(), &_total_error, sizeof(uint32_t));
    
    send(ptr);

    
#if defined SD_MODULE
    send(sd.status(ptr));
#endif


#if defined INDOORINO_SAMPLER
    extern  uint32_t lastprobe;
    uint32_t a=lastprobe + conf.step() - rtc.epoch();
    uint32_t b=sd.probenum();

    ptr = reallocPacket(ptr, IBACOM_STATUS_SAMPLER);
    
    strcpy(ptr->p_name(), buf);
    memcpy(ptr->p_stepday1(), &a, sizeof(uint32_t)); 
    memcpy(ptr->p_value(), &b, sizeof(uint32_t)); 
    
    send(ptr);
            
    for (uint8_t i=0; i<conf.devnum(); i++)
    {
        ptr = devices(i)->status(ptr);
        send(ptr);
    }

#elif defined INDOORINO_ESP
    ptr = reallocPacket(ptr, IBACOM_STATUS_ESP);
    extern uint32_t total_errors;
    extern uint32_t total_rx_ser;
    extern uint32_t total_rx_udp;
    extern uint32_t total_tx_ser;
    
    memcpy(ptr->p_value(), &total_errors, sizeof(uint32_t));
    memcpy(ptr->p_parameter1(), &_total_tx, sizeof(uint32_t));
    memcpy(ptr->p_parameter2(), &total_rx_udp, sizeof(uint32_t));
    memcpy(ptr->p_parameter3(), &total_tx_ser, sizeof(uint32_t));
    memcpy(ptr->p_parameter4(), &total_rx_ser, sizeof(uint32_t));
    send(ptr);
    
#endif

    delete ptr;

}

void        packetRouter::sendAllarm            (const uint8_t type, const uint8_t level)
{
        ipacket * r = new ipacket(IBACOM_ALLARM);
    
    memcpy_P(r->p_type(), &ALLARMS_LIST[type], LEN_NAME);
    memcpy_P(r->p_board(), P2C(BOARD_NAME), LEN_NAME);
    
    *r->p_epoch() = rtc.epoch();
    *r->p_level() = level;
    
    send(r);
    delete r;
}

void        packetRouter::sendWarning           (const uint8_t type, const uint8_t level)
{
    
//     char buf_type  [LEN_NAME] {0};
//     char buf_board [LEN_NAME] {0};
    
    ipacket * r = new ipacket(IBACOM_WARNINGS);
    
    memcpy_P(r->p_type(), &WARNING_LIST[type], LEN_NAME);
    memcpy(r->p_board(), P2C(BOARD_NAME), LEN_NAME);
    
    *r->p_epoch() = rtc.epoch();
    *r->p_level() = level;
    
    send(r);
    delete r;
}
